import unittest
from LyndonWords import *
import numpy
def toSet(lW):
    resultSet = set()
    for i in lW.weightToWordDictionary.values():
        for j in i:
            resultSet.add(str(j))
    return resultSet

class TestStringMethods(unittest.TestCase):
    def test_A_Finite_1(self):
        arr = [2,3,1,4]
        expected = [
            "1",
            '2',
            '3',
            '4',
            '2,1',
            '2,3',
            '3,4',
            '2,1,3',
            '2,3,4',
            '2,1,3,4']
        self.assertEqual(toSet(rootSystem(arr,"A")),set(expected))
    def test_A_Finite_2(self):
        arr = [1,2,3,4,5,6,7,8,9,10]
        expected = set(['1','2','3','4','5','6','7','8','9','10','1,2','2,3',
            '3,4','4,5','5,6','6,7','7,8','8,9','9,10','1,2,3','2,3,4','3,4,5',
            '4,5,6','5,6,7','6,7,8','7,8,9','8,9,10','1,2,3,4','2,3,4,5','3,4,5,6','4,5,6,7',
            '5,6,7,8','6,7,8,9','7,8,9,10','1,2,3,4,5','2,3,4,5,6','3,4,5,6,7','4,5,6,7,8',
            '5,6,7,8,9','6,7,8,9,10','1,2,3,4,5,6','2,3,4,5,6,7','3,4,5,6,7,8','4,5,6,7,8,9','5,6,7,8,9,10',
            '1,2,3,4,5,6,7','2,3,4,5,6,7,8','3,4,5,6,7,8,9','4,5,6,7,8,9,10','1,2,3,4,5,6,7,8',
            '2,3,4,5,6,7,8,9','3,4,5,6,7,8,9,10','1,2,3,4,5,6,7,8,9','2,3,4,5,6,7,8,9,10','1,2,3,4,5,6,7,8,9,10'])
        self.assertEqual(toSet(rootSystem(arr,"A")),expected)
    def test_C_Finite_1(self):
        arr = [1,2,3]
        expected = [x.strip(' ') for x in 
                    '''1
                    2
                    3
                    2,3
                    1,2
                    1,2,3
                    2,2,3
                    1,2,3,2
                    1,2,1,2,3'''.split("\n")]
        self.assertEqual(toSet(rootSystem(arr,'C')),set(expected))
    def test_C_Finite_2(self):
        arr = [4,2,1,3]
        expected = set(
            ['1','2','3','4','4,3','2,1','2,3','4,3,2','2,3,1','4,3,3','4,3,2,1','4,3,3,2','4,3,3,2,1',
             '4,3,3,2,2','4,3,3,2,1,2','4,3,3,2,1,2,1']
        )
        self.assertEqual(toSet(rootSystem(arr,'C')),set(expected))
    def test_C_Affine_1(self):
        arr = [4,0,1,2,3]
        expected = set(
            [
                '0','1','2','3','4',
                '4,3','1,2','2,3','0,1','4,3,2','1,2,3','4,3,3','0,1,2','0,1,1','4,3,2,1',
                '4,3,3,2','0,1,2,3','0,1,2,1','4,3,3,2,1','4,3,3,2,2','0,1,2,3,1','4,3,2,1,0',
                '0,1,2,1,2','4,3,3,2,2,1','0,1,2,3,1,2','4,3,3,2,1,0','4,3,2,1,0,1','4,3,3,2,2,1,1','4,3,3,2,2,1,0',
                '4,3,3,2,1,0,1','4,3,2,1,0,1,2','0,1,2,3,1,2,3','4,3,3,2,2,1,1,0','4,3,3,2,2,1,0,1','4,3,3,2,1,0,1,2',
                '4,3,2,1,0,1,2,3','4,3,3,2,2,1,1,0,1','4,3,3,2,2,1,0,1,2','4,3,3,2,1,0,1,2,3','4,3,2,1,4,3,2,1,0','4,3,3,2,2,1,1,0,0',
                '4,3,2,1,0,1,2,4,3,3','4,3,3,2,2,1,1,0,1,2','4,3,3,2,2,1,0,1,2,3','4,3,3,2,2,1,1,0,1,0','4,3,2,1,0,1,2,4,3,3,2','4,3,3,2,2,1,1,0,1,2,3',
                '4,3,3,2,1,4,3,3,2,1,0','4,3,3,2,2,1,1,0,1,2,0','4,3,3,2,2,1,1,0,1,0,1','4,3,2,1,0,1,2,4,3,3,2,1','4,3,3,2,1,0,1,4,3,3,2,2','4,3,3,2,2,1,1,0,1,2,3,0',
                '4,3,3,2,2,1,1,0,1,2,0,1','4,3,3,2,1,0,1,4,3,3,2,2,1','4,3,3,2,2,1,4,3,3,2,2,1,0','4,3,3,2,2,1,1,0,1,2,3,0,1','4,3,2,1,0,1,2,4,3,3,2,1,0','4,3,3,2,2,1,1,0,1,2,0,1,2',
                '4,3,3,2,2,1,0,4,3,3,2,2,1,1','4,3,3,2,2,1,1,0,1,2,3,0,1,2','4,3,3,2,1,0,1,4,3,3,2,2,1,0','4,3,2,1,0,1,2,4,3,3,2,1,0,1','4,3,3,2,2,1,1,4,3,3,2,2,1,1,0','4,3,3,2,2,1,0,4,3,3,2,2,1,1,0',
                '4,3,3,2,1,0,1,4,3,3,2,2,1,0,1','4,3,2,1,0,1,2,4,3,3,2,1,0,1,2','4,3,3,2,2,1,1,0,1,2,3,0,1,2,3','4,3,3,2,2,1,1,4,3,3,2,2,1,1,0,0','4,3,3,2,2,1,0,4,3,3,2,2,1,1,0,1','4,3,3,2,1,0,1,4,3,3,2,2,1,0,1,2',
                '4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,3','4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0,1','4,3,3,2,2,1,0,1,4,3,3,2,2,1,0,1,2','4,3,3,2,1,0,1,2,4,3,3,2,1,0,1,2,3','4,3,2,1,0,1,2,4,3,2,1,0,1,2,4,3,3','4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0,0',
                '4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,4,3,3','4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0,1,2','4,3,3,2,2,1,0,1,4,3,3,2,2,1,0,1,2,3','4,3,3,2,2,1,1,0,0,4,3,3,2,2,1,1,0,1','4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,4,3,3,2',
                '4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0,1,2,3','4,3,3,2,1,0,1,4,3,3,2,1,0,1,4,3,3,2,2','4,3,3,2,2,1,1,0,0,4,3,3,2,2,1,1,0,1,2','4,3,3,2,2,1,1,0,1,4,3,3,2,2,1,1,0,1,0','4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,4,3,3,2,1',
                '4,3,3,2,1,0,1,4,3,3,2,2,1,0,1,4,3,3,2,2','4,3,3,2,2,1,1,0,0,4,3,3,2,2,1,1,0,1,2,3','4,3,3,2,2,1,1,0,1,0,4,3,3,2,2,1,1,0,1,2','4,3,3,2,1,0,1,4,3,3,2,2,1,0,1,4,3,3,2,2,1','4,3,3,2,2,1,0,4,3,3,2,2,1,0,4,3,3,2,2,1,1',
                '4,3,3,2,2,1,1,0,1,0,4,3,3,2,2,1,1,0,1,2,3','4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,4,3,3,2,1,0','4,3,3,2,2,1,1,0,1,2,4,3,3,2,2,1,1,0,1,2,0','4,3,3,2,2,1,0,4,3,3,2,2,1,1,0,4,3,3,2,2,1,1','4,3,3,2,2,1,1,0,1,2,0,4,3,3,2,2,1,1,0,1,2,3',
                '4,3,3,2,1,0,1,4,3,3,2,2,1,0,1,4,3,3,2,2,1,0','4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,4,3,3,2,1,0,1','4,3,3,2,2,1,1,4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0','4,3,3,2,2,1,0,4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0','4,3,3,2,1,0,1,4,3,3,2,2,1,0,1,4,3,3,2,2,1,0,1',
                '4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,4,3,3,2,1,0,1,2','4,3,3,2,2,1,1,0,1,2,3,4,3,3,2,2,1,1,0,1,2,3,0','4,3,3,2,1,0,1,4,3,3,2,2,1,0,1,4,3,3,2,2,1,0,1,2',
                '4,3,2,1,0,1,2,4,3,3,2,1,0,1,2,4,3,3,2,1,0,1,2,3','4,3,3,2,2,1,0,4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0,1','4,3,3,2,2,1,1,4,3,3,2,2,1,1,0,4,3,3,2,2,1,1,0,0'
            ]
        )
        self.assertSetEqual(toSet(rootSystem(arr,'C',2)),set(expected))
    def test_C_Affine_2(self):
        arr = [3,0,1,2]
        expected = set(
            ['3','0','1','2','3,2','1,2','0,1', '3,2,1','3,2,2','0,1,2','0,1,1','3,2,2,1','0,1,2,1','3,2,1,0','3,2,2,1,1',
            '3,2,2,1,0','3,2,1,0,1','0,1,2,1,2','3,2,2,1,1,0','3,2,2,1,0,1','3,2,1,0,1,2','3,2,2,1,1,0,1','3,2,2,1,0,1,2',
            '3,2,1,3,2,1,0','3,2,2,1,1,0,0','3,2,1,0,1,3,2,2','3,2,2,1,1,0,1,2','3,2,2,1,1,0,1,0','3,2,1,0,1,3,2,2,1',
            '3,2,2,1,3,2,2,1,0','3,2,2,1,1,0,1,2,0','3,2,2,1,1,0,1,0,1','3,2,2,1,0,3,2,2,1,1','3,2,2,1,1,0,1,2,0,1',
            '3,2,1,0,1,3,2,2,1,0','3,2,2,1,1,3,2,2,1,1,0','3,2,2,1,0,3,2,2,1,1,0','3,2,1,0,1,3,2,2,1,0,1','3,2,2,1,1,0,1,2,0,1,2',
            '3,2,2,1,1,3,2,2,1,1,0,0','3,2,2,1,0,3,2,2,1,1,0,1','3,2,1,0,1,3,2,2,1,0,1,2','3,2,2,1,1,0,3,2,2,1,1,0,1','3,2,2,1,0,1,3,2,2,1,0,1,2',
            '3,2,1,0,1,3,2,1,0,1,3,2,2','3,2,2,1,1,0,3,2,2,1,1,0,0','3,2,1,0,1,3,2,2,1,0,1,3,2,2','3,2,2,1,1,0,3,2,2,1,1,0,1,2','3,2,2,1,1,0,0,3,2,2,1,1,0,1',
            '3,2,1,0,1,3,2,2,1,0,1,3,2,2,1','3,2,2,1,0,3,2,2,1,0,3,2,2,1,1','3,2,2,1,1,0,0,3,2,2,1,1,0,1,2','3,2,2,1,1,0,1,3,2,2,1,1,0,1,0','3,2,2,1,0,3,2,2,1,1,0,3,2,2,1,1',
            '3,2,2,1,1,0,1,0,3,2,2,1,1,0,1,2','3,2,1,0,1,3,2,2,1,0,1,3,2,2,1,0','3,2,2,1,1,3,2,2,1,1,0,3,2,2,1,1,0','3,2,2,1,0,3,2,2,1,1,0,3,2,2,1,1,0',
            '3,2,1,0,1,3,2,2,1,0,1,3,2,2,1,0,1','3,2,2,1,1,0,1,2,3,2,2,1,1,0,1,2,0','3,2,1,0,1,3,2,2,1,0,1,3,2,2,1,0,1,2',
            '3,2,2,1,0,3,2,2,1,1,0,3,2,2,1,1,0,1','3,2,2,1,1,3,2,2,1,1,0,3,2,2,1,1,0,0'
]
        )
        self.assertSetEqual(toSet(rootSystem(arr,'C',2)),set(expected))
    '''def test_A_Affine_1(self):
        arr=[1,0]
        expected = set(['1','0','1,0','1,1,0','1,0,0','1,1,0,0',
                        '1,0,1,0,0','1,1,0,1,0','1,1,0,1,0,0','1,1,0,1,0,1,0',
                        '1,0,1,0,1,0,0','1,1,0,1,0,1,0,0'])
        self.assertEqual(getSet("A",arr,affineCount=3),expected)'''
    def test_A_Affine_2(self):
        arr=[1,2,0]
        expected = set(
            ['1','2','0','1,2','1,0','2,0','1,0,2','1,2,0',
             '1,2,1,0','1,0,2,2','1,0,2,0','1,2,1,0,2','1,0,1,0,2',
             '1,0,2,0,2','1,0,1,0,2,2','1,2,1,0,2,0',
             '1,2,1,0,2,1,0','1,0,2,1,0,2,2','1,0,2,1,0,2,0',
             '1,2,1,0,2,1,0,2','1,0,1,0,2,1,0,2','1,0,2,2,1,0,2,0',
             '1,0,1,0,2,1,0,2,2','1,2,1,0,2,1,0,2,0']
        )
        self.assertEqual(toSet(rootSystem(arr,"A",2)),expected)
    def test_A_Affine_3(self):
        arr=[1,2,3,4,0]
        expected = set(
            ['1','2','3','4','0','1,2','2,3','3,4','4,0',
             '1,0','1,2,3','2,3,4','3,4,0','1,0,4','1,0,2',
             '1,2,3,4','2,3,4,0','1,0,4,3','1,0,4,2','1,0,2,3',
             '1,0,4,3,2','1,0,2,3,4','1,2,3,4,0','1,2,3,4,1,0',
             '1,2,3,4,1,0,2','1,2,3,4,1,0,2,3','1,2,3,4,1,0,2,3,4',
             '1,0,4,3,2,2','1,0,4,3,2,3,2','1,0,4,3,2,3,4,2',
             '1,0,4,3,2,3,4,0,2','1,0,4,3,2,3','1,0,4,3,2,3,4',
             '1,0,4,2,3,4','1,0,4,3,2,3,4,0','1,0,4,2,3','1,0,2,3,4,0',
             '1,0,2,3,1,0,4,2','1,0,4,2,1,0,4,3,2','1,2,3,4,1,0,2,3,4,0',
             '1,0,2,3,1,0,4,2,3','1,0,4,2,1,0,4,3,2,3','1,0,2,3,1,0,4,2,3,4',
             '1,0,4,2,3,4,0','1,0,4,2,1,0,4,3','1,0,4,3,1,0,4,3,2',
             '1,0,4,3,1,0,4,3,2,2','1,0,2,3,1,0,4'
             ]
        )
        self.assertEqual(toSet(rootSystem(arr,'A',1)),expected)
    def test_A_Affine_4(self):
        arr=[1,0,2,3]
        expected = set(['1','2','3','0','1,2','2,3','0,3','1,0','1,2,3,0'
                        ,'1,2,3','0,3,2','1,0,3','1,2,0','1,2,3','1,2,0,3','1,0,3,2'
                        ,'1,0,3,1,2','1,2,0,3,2','1,2,3,0,3','1,2,3,0,0','1,2,0,1,2,3',
                        '1,2,3,0,3,2','1,2,3,0,3,0','1,0,3,1,2,0','1,2,3,1,2,3,0','1,2,3,0,3,2,0','1,0,3,1,2,0,3',
                        '1,2,0,1,2,3,0','1,2,3,1,2,3,0,0','1,2,0,1,2,3,0,3','1,0,3,1,2,0,3,2',
                        '1,0,3,1,2,0,3,1,2','1,2,0,3,1,2,0,3,2','1,2,3,0,1,2,3,0,3','1,2,3,0,1,2,3,0,0',
                        '1,2,0,1,2,3,0,1,2,3','1,2,3,0,1,2,3,0,3,2','1,2,3,0,0,1,2,3,0,3',
                        '1,0,3,1,2,0,3,1,2,0','1,2,3,1,2,3,0,1,2,3,0','1,2,3,0,0,1,2,3,0,3,2',
                        '1,0,3,1,2,0,3,1,2,0,3','1,2,0,1,2,3,0,1,2,3,0','1,2,3,1,2,3,0,1,2,3,0,0',
                        '1,2,0,1,2,3,0,1,2,3,0,3','1,0,3,1,2,0,3,1,2,0,3,2'])
        self.assertEqual(toSet(rootSystem(arr,"A",2)),expected)
    def test_A_Affine_5(self):
        arr=[1,2,3,4,5,0]
        expected = set(['1','2','3','4','5','0','1,2','4,5','2,3','3,4','5,0','1,0','1,2,3','2,3,4','3,4,5','4,5,0',
                        '1,0,5','1,0,2','1,2,3,4','2,3,4,5','3,4,5,0','1,0,5,4','1,0,5,2','1,0,2,3','1,0,5,2,3',
                        '1,2,3,4,5','2,3,4,5,0','1,0,5,4,3','1,0,5,4,2','1,0,2,3,4','1,0,5,4,3,2','1,0,5,4,2,3',
                        '1,0,5,2,3,4','1,0,2,3,4,5','1,2,3,4,5,0','1,2,3,4,5,1,0','1,0,5,4,3,2,2','1,0,5,4,3,2,3',
                        '1,0,5,4,2,3,4','1,0,5,2,3,4,5','1,0,2,3,4,5,0','1,2,3,4,5,1,0,2','1,0,5,4,3,2,3,2',
                        '1,0,5,4,3,2,3,4','1,0,5,4,2,3,4,5','1,0,5,2,3,4,5,0','1,0,2,3,4,1,0,5','1,2,3,4,5,1,0,2,3',
                        '1,0,5,4,3,2,3,4,2','1,0,5,4,3,2,3,4,5','1,0,5,4,2,3,4,5,0','1,0,5,2,3,1,0,5,4','1,0,2,3,4,1,0,5,2',
                        '1,2,3,4,5,1,0,2,3,4','1,0,5,4,3,2,3,4,5,2','1,0,5,4,3,2,3,4,5,0','1,0,5,4,2,1,0,5,4,3',
                        '1,0,5,4,2,1,0,5,4,3','1,0,5,2,3,1,0,5,4,2','1,0,2,3,4,1,0,5,2,3','1,2,3,4,5,1,0,2,3,4,5',
                        '1,0,5,4,3,2,3,4,5,0,2','1,0,5,4,3,1,0,5,4,3,2','1,0,5,4,2,1,0,5,4,3,2','1,0,5,2,3,1,0,5,4,2,3',
                        '1,0,2,3,4,1,0,5,2,3,4','1,0,5,4,3,1,0,5,4,3,2,2','1,0,5,4,2,1,0,5,4,3,2,3','1,0,5,2,3,1,0,5,4,2,3,4',
                        '1,0,2,3,4,1,0,5,2,3,4,5','1,2,3,4,5,1,0,2,3,4,5,0'])
        self.assertEqual(toSet(rootSystem(arr,"A",1)),expected)
    def test_B_1(self):
        arr=[1,2,3,4]
        expected=set(['1','2','3','4','3,4','1,2','2,3',
                      '1,2,3','2,3,4','1,2,3,4','3,4,4','2,3,4,4',
                      '2,3,4,4,3','1,2,3,4,4','1,2,3,4,4,3,2',
                      '1,2,3,4,4,3'])
        self.assertEqual(toSet(rootSystem(arr,"B")),expected)
    def test_B_2(self):
        arr=[4,3,1,2]
        expected=set(['1','2','3','4','4,3','1,2','3,2','4,4,3','4,3,2',
                      '3,2,1','4,3,2,1','4,4,3,2','4,3,4,3,2',
                      '4,4,3,2,1','4,3,4,3,2,1','4,3,2,4,3,2,1'])
        self.assertEqual(toSet(rootSystem(arr,"B")),expected)
    def test_D_1(self):
        arr=[4,1,2,3]
        expected=set(['4','1','2','3','1,2','2,3',
                      '4,2','1,2,3','4,2,1','4,2,3',
                      '4,2,3,1','4,2,3,1,2'])
        self.assertEqual(toSet(rootSystem(arr,'D')),expected)
    def test_D_Affine_1(self):
        arr=[0,1,2,3,4]
        expected=set(['0','1','2','3','4','1,2','2,3','2,4','0,2','1,2,3','1,2,4','2,4,3','0,2,4','0,2,3','0,2,1','1,2,4,3',
                      '0,2,4,3','0,2,4,1','0,2,3,1','1,2,4,3,2','0,2,4,3,2','0,2,4,3,1','0,2,4,1,2','0,2,3,1,2','0,2,4,3,2,1',
                      '0,2,4,3,1,2','0,2,4,1,2,3','0,2,3,1,2,4','0,2,4,3,2,1,1','0,2,4,3,2,1,2','0,2,4,3,1,2,3','0,2,4,3,1,2,4',
                      '0,2,3,1,0,2,4','0,2,4,3,2,1,2,1','0,2,4,3,2,1,2,3','0,2,4,3,2,1,2,4','0,2,3,1,2,0,2,4','0,2,4,3,2,1,2,3,1',
                      '0,2,4,3,2,1,2,4,1','0,2,4,3,2,1,2,4,3','0,2,4,1,2,0,2,4,3','0,2,3,1,2,0,2,4,3','0,2,3,1,2,0,2,4,1','0,2,4,3,2,1,2,4,3,1',
                      '0,2,4,3,1,0,2,4,3,2','0,2,4,1,2,0,2,4,3,1','0,2,3,1,2,0,2,4,3,1','0,2,4,3,2,1,2,4,3,1,2','0,2,4,3,2,0,2,4,3,2,1',
                      '0,2,4,3,1,0,2,4,3,2,1','0,2,4,1,2,0,2,4,3,1,2','0,2,3,1,2,0,2,4,3,1,2','0,2,4,3,2,0,2,4,3,2,1,1','0,2,4,3,1,0,2,4,3,2,1,2',
                      '0,2,4,1,2,0,2,4,3,1,2,3','0,2,3,1,2,0,2,4,3,1,2,4','0,2,4,3,2,1,0,2,4,3,2,1,1','0,2,4,3,2,1,0,2,4,3,2,1,2','0,2,4,3,1,2,0,2,4,3,1,2,3',
                      '0,2,4,3,1,2,0,2,4,3,1,2,4','0,2,3,1,2,0,2,4,3,1,0,2,4','0,2,4,3,2,1,1,0,2,4,3,2,1,2','0,2,4,3,2,1,0,2,4,3,2,1,2,3',
                      '0,2,4,3,2,1,0,2,4,3,2,1,2,4','0,2,3,1,2,0,2,4,3,1,2,0,2,4','0,2,4,3,2,1,1,0,2,4,3,2,1,2,3','0,2,4,3,2,1,1,0,2,4,3,2,1,2,4',
                      '0,2,4,3,2,1,0,2,4,3,2,1,2,4,3','0,2,4,1,2,0,2,4,3,1,2,0,2,4,3','0,2,3,1,2,0,2,4,3,1,2,0,2,4,3','0,2,3,1,2,0,2,4,3,1,2,0,2,4,1',
                      '0,2,4,3,2,1,1,0,2,4,3,2,1,2,4,3','0,2,4,3,1,0,2,4,3,2,1,0,2,4,3,2','0,2,4,1,2,0,2,4,3,1,2,0,2,4,3,1','0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1',
                      '0,2,4,3,2,1,2,3,1,0,2,4,3,2,1,2,4','0,2,4,3,2,0,2,4,3,2,1,0,2,4,3,2,1','0,2,4,3,1,0,2,4,3,2,1,0,2,4,3,2,1','0,2,4,1,2,0,2,4,3,1,2,0,2,4,3,1,2',
                      '0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2','0,2,4,3,2,0,2,4,3,2,1,0,2,4,3,2,1,1','0,2,4,3,1,0,2,4,3,2,1,0,2,4,3,2,1,2','0,2,4,1,2,0,2,4,3,1,2,0,2,4,3,1,2,3',
                      '0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,4','0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1,1','0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1,2','0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,3',
                      '0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,4','0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,0,2,4','0,2,4,3,2,1,0,2,4,3,2,1,2,0,2,4,3,2,1,1',
                      '0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1,2,3','0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1,2,4','0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4',
                      '0,2,4,3,2,1,0,2,4,3,2,1,2,3,0,2,4,3,2,1,1','0,2,4,3,2,1,0,2,4,3,2,1,2,4,0,2,4,3,2,1,1','0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1,2,4,3',
                      '0,2,4,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3','0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3','0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,1',
                      '0,2,4,3,2,1,0,2,4,3,2,1,2,4,3,0,2,4,3,2,1,1','0,2,4,3,1,0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2','0,2,4,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1'
                      ,'0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1','0,2,4,3,2,1,1,0,2,4,3,2,1,2,4,3,0,2,4,3,2,1,2','0,2,4,3,2,0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1',
                      '0,2,4,3,1,0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1','0,2,4,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2','0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2',
                      '0,2,4,3,2,0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1,1','0,2,4,3,1,0,2,4,3,2,1,0,2,4,3,2,1,0,2,4,3,2,1,2','0,2,4,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,3',
                      '0,2,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,0,2,4,3,1,2,4'])
        self.assertEqual(toSet(rootSystem(arr,'D',3)),expected)
    def test_D_Affine_2(self):
        arr = [1,4,5,2,3,0]

        expecteed = set(['1','4','5','2','3','0','1,2','2,3','4,3','5,3','4,0','1,2,3','4,3,2','5,3,2',
                         '4,3,5','4,0,2','1,2,3,4','1,2,3,5','4,3,2,5','4,0,2,3','1,2,4,0','1,2,3,5,4','4,3,2,5,3',
                         '4,0,2,3,5','4,3,2,4,0','1,2,3,4,0','1,2,3,5,4,3','4,3,2,5,4,0','1,2,3,5,4,0','1,2,3,4,0,4',
                         '1,2,3,4,0,2','1,2,3,5,4,3,2','4,3,2,5,3,4,0','1,2,3,5,4,0,4','1,2,3,5,4,0,2','1,2,3,4,0,2,4','4,3,2,5,3,4,0,2',
                         '1,2,3,5,4,0,4,3','1,2,3,5,4,0,2,4','1,2,3,5,4,0,2,3','1,2,3,4,0,2,4,3','1,2,3,5,4,0,2,3,4','1,2,3,5,4,0,2,4,3',
                         '1,2,3,5,4,0,4,3,2','1,2,3,5,4,3,2,4,0','1,2,3,4,0,2,4,3,5','1,2,3,4,0,4,1,2,3,5','1,2,3,5,4,0,2,4,3,2','1,2,3,5,4,0,2,3,4,3',
                         '1,2,3,5,4,0,2,3,4,4','1,2,3,5,4,0,2,4,3,5','1,2,3,4,0,2,4,1,2,3,5','1,2,3,5,4,0,2,3,4,3,2','1,2,3,5,4,0,2,3,4,3,4',
                         '1,2,3,5,4,0,2,3,4,3,5','1,2,3,5,4,0,2,3,4,4,0','1,2,3,4,0,2,4,3,1,2,3,5','1,2,3,5,4,0,2,3,4,3,2,4','1,2,3,5,4,0,2,3,4,3,2,5',
                         '1,2,3,5,4,0,2,3,4,3,5,4','1,2,3,5,4,0,2,3,4,4,0,2','1,2,3,4,0,2,4,3,1,2,3,5,4','1,2,3,5,4,3,2,1,2,3,5,4,0','1,2,3,5,4,0,2,3,4,3,2,5,4',
                         '1,2,3,5,4,0,2,3,4,3,2,4,0','1,2,3,4,0,2,4,1,2,3,5,4,0','1,2,3,5,4,3,2,1,2,3,5,4,0,4','1,2,3,5,4,0,2,3,4,3,2,5,4,3','1,2,3,5,4,0,2,3,4,3,2,5,4,0',
                         '1,2,3,5,4,0,2,3,4,3,2,4,0,4','1,2,3,4,0,2,4,3,1,2,3,5,4,0','1,2,3,5,4,3,2,1,2,3,5,4,0,4,3','1,2,3,5,4,0,2,3,4,3,2,5,4,0,4',
                         '1,2,3,5,4,0,4,3,1,2,3,5,4,0,2','1,2,3,4,0,2,4,3,1,2,3,5,4,0,4','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2','1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2',
                         '1,2,3,5,4,0,2,3,4,3,2,5,4,0,4,3','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4',
                         '1,2,3,5,4,0,2,3,4,3,2,5,4,0,4,3,2','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4','1,2,3,5,4,0,2,3,1,2,3,5,4,0,2,3,4',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3','1,2,3,5,4,0,2,3,1,2,3,5,4,0,2,3,4,4','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4,3','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,2',
                         '1,2,3,5,4,3,2,1,2,3,5,4,0,2,3,4,4,0','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,5','1,2,3,4,0,2,4,3,1,2,3,5,4,0,4,1,2,3,5','1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,2',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4','1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,5','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,1,2,3,5',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2','1,2,3,5,4,0,2,3,4,4,1,2,3,5,4,0,2,3,4,3','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,5','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4,0',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5','1,2,3,5,4,0,2,3,4,4,1,2,3,5,4,0,2,3,4,3,2','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2,5',
                         '1,2,3,5,4,0,2,3,4,4,1,2,3,5,4,0,2,3,4,3,5','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4,0,2','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4',
                         '1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0','1,2,3,5,4,0,2,3,4,4,1,2,3,5,4,0,2,3,4,3,2,5','1,2,3,5,4,0,2,3,4,4,0,2,1,2,3,5,4,0,2,3,4,3',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,1,2,3,5,4,0','1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4','1,2,3,5,4,0,2,3,4,3,5,4,1,2,3,5,4,0,2,3,4,3,2',
                         '1,2,3,5,4,0,2,3,4,4,0,2,1,2,3,5,4,0,2,3,4,3,5','1,2,3,5,4,0,2,3,4,4,0,2,1,2,3,5,4,0,2,3,4,3,4','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0',
                         '1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3','1,2,3,5,4,0,2,3,4,4,0,2,1,2,3,5,4,0,2,3,4,3,5,4','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,4','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2','1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3,2',
                         '1,2,3,5,4,0,2,3,4,3,5,4,1,2,3,5,4,0,2,3,4,3,2,4,0','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4','1,2,3,5,4,0,2,3,4,3,2,4,0,4,1,2,3,5,4,0,2,3,4,3,2,5','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3',
                         '1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4','1,2,3,5,4,0,2,3,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3',
                         '1,2,3,5,4,0,2,3,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,2',
                         '1,2,3,5,4,3,2,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4,0','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,5','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,4,1,2,3,5',
                         '1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,2','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4',
                         '1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,5','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,1,2,3,5',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,1,2,3,5,4,0,2,3,4,4',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,5','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4,0',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2,1,2,3,5,4,0,2,3,4,4',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2,5','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,5,1,2,3,5,4,0,2,3,4,4',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4,0,2','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4',
                         '1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0','1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2,5,1,2,3,5,4,0,2,3,4,4',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2,1,2,3,5,4,0,2,3,4,4,0','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,1,2,3,5,4,0',
                         '1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4','1,2,3,5,4,0,2,3,4,4,1,2,3,5,4,0,2,3,4,3,2,5,1,2,3,5,4,0,2,3,4,3',
                         '1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3,2,5,1,2,3,5,4,0,2,3,4,4,0','1,2,3,5,4,0,2,3,4,4,1,2,3,5,4,0,2,3,4,3,2,1,2,3,5,4,0,2,3,4,4,0',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0','1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3',
                         '1,2,3,5,4,0,2,3,4,4,1,2,3,5,4,0,2,3,4,3,2,5,1,2,3,5,4,0,2,3,4,4,0','1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,4','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2',
                         '1,2,3,5,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3,2,1,2,3,5,4,0,4,3,2','1,2,3,5,4,0,2,3,4,4,0,2,1,2,3,5,4,0,2,3,4,3,5,4,1,2,3,5,4,0,2,3,4,3',
                         '1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4','1,2,3,5,4,0,2,3,4,4,0,2,1,2,3,5,4,0,2,3,4,3,5,4,1,2,3,5,4,0,2,3,4,3,2',
                         '1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4',
                         '1,2,3,5,4,0,2,3,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4','1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3',
                         '1,2,3,5,4,0,2,3,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4','1,2,3,5,4,0,2,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,3',
                         '1,2,3,5,4,0,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,2','1,2,3,5,4,3,2,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,1,2,3,5,4,0,2,3,4,4,0',
                         '1,2,3,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,1,2,3,5,4,0,2,4,3,5',])
        a = rootSystem(arr,'D',3)
if __name__ == '__main__':
    unittest.main()